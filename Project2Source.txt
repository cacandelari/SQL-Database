/*
DROP TABLE Customer;
DROP TABLE SalesPerson;
DROP TABLE Territory;
DROP TABLE DoesBusinessIn;
DROP TABLE Product;
DROP TABLE ProductLine;
DROP TABLE Orders;
DROP TABLE OrderLine;
DROP TABLE PriceUpdate;
*/

/*
CREATE TABLE Customer (
CustomerID VARCHAR2(50 CHAR),
CustomerName VARCHAR2(50 CHAR),
CustomerAddress VARCHAR2(50 CHAR),
CustomerCity VARCHAR2(50 CHAR),
CustomerState VARCHAR2(50 CHAR),
CustomerPostalCode VARCHAR2(50 CHAR),
CustomerEmail VARCHAR2(50 CHAR) DEFAULT 'N/A',
CustomerUserName VARCHAR2(50 CHAR) DEFAULT 'N/A',
CustomerPassword VARCHAR2(50 CHAR) DEFAULT 'N/A',

CONSTRAINT Customer_PK PRIMARY KEY(CustomerID)
);

CREATE TABLE Territory 
(
TerritoryID VARCHAR2(50 CHAR),
TerritoryName VARCHAR2(50 CHAR),

CONSTRAINT Territory_PK PRIMARY KEY(TerritoryID)
);

CREATE TABLE Salesperson(
SalespersonID VARCHAR2(50 CHAR),
SalespersonName VARCHAR2(50 CHAR),
SalespersonPhone VARCHAR2(50 CHAR),
SalespersonEmail VARCHAR2(50 CHAR) DEFAULT 'N/A',
SalespersonUserName VARCHAR2(50 CHAR) DEFAULT 'N/A',
SalespersonPassword VARCHAR2(50 CHAR) DEFAULT 'N/A',
TerritoryID VARCHAR2(50 CHAR),

CONSTRAINT Salesperson_PK PRIMARY KEY(SalespersonID),

CONSTRAINT TerritoryID_FK FOREIGN KEY(TerritoryID)
REFERENCES Territory(TerritoryID)

);

CREATE TABLE DoesBusinessIn
(
CustomerID VARCHAR2(50 CHAR),
TerritoryID VARCHAR2(50 CHAR),

CONSTRAINT CustomerID_FK2 FOREIGN KEY(CustomerID)
REFERENCES Customer(CustomerID),

CONSTRAINT TerritoryID_FK2 FOREIGN KEY(TerritoryID)
REFERENCES Territory(TerritoryID)

);

CREATE TABLE Product
(
ProductID VARCHAR2(50 CHAR),
ProductName VARCHAR2(50 CHAR),
ProductFinish VARCHAR2(50 CHAR),
ProductStandardPrice VARCHAR2(50 CHAR),
ProductLineID VARCHAR2(50 CHAR),
Photo VARCHAR2(50 CHAR) DEFAULT 'N/A',

CONSTRAINT ProductID_PK PRIMARY KEY(ProductID)

);

CREATE TABLE ProductLine
(
ProductLineID VARCHAR2(50 CHAR),
ProductLineName VARCHAR2(50 CHAR),

CONSTRAINT ProductLineID_PK PRIMARY KEY(ProductLineID)
);

CREATE TABLE Orders
(
OrderID VARCHAR2(50 CHAR),
OrderDate DATE,
CustomerID VARCHAR2(50 CHAR),

CONSTRAINT OrderID_PK PRIMARY KEY(OrderID),

CONSTRAINT CustomerID_FK FOREIGN KEY(CustomerID)
REFERENCES Customer(CustomerID)

);

CREATE TABLE OrderLine
(
OrderID VARCHAR2(50 CHAR),
ProductID VARCHAR2(50 CHAR),
OrderedQuantity VARCHAR2(50 CHAR),
SalesPrice VARCHAR2(50 CHAR),


CONSTRAINT OrderID_FK FOREIGN KEY(OrderID)
REFERENCES Orders(OrderID),

CONSTRAINT ProductID_FK FOREIGN KEY(ProductID)
REFERENCES Product(ProductID)

);

CREATE TABLE PriceUpdate
(
PriceUpdateID VARCHAR2(50 CHAR),
DateChanged VARCHAR2(50 CHAR),
OldPrice VARCHAR2(50 CHAR),
NewPrice VARCHAR2(50 CHAR),

CONSTRAINT PriceUpdateID_PK PRIMARY KEY(PriceUpdateID)
);
*/

/*
DROP TABLE Customer;
DROP TABLE SalesPerson;
DROP TABLE Territory;
DROP TABLE DoesBusinessIn;
DROP TABLE Product;
DROP TABLE ProductLine;
DROP TABLE Orders;
DROP TABLE OrderLine;
DROP TABLE PriceUpdate;
*/






/*
--CUSTOMER INSERTS
DESC Customer;
INSERT INTO Customer(CustomerID, CustomerName, CustomerAddress, CustomerCity, CustomerState, CustomerPostalCode, 
CustomerEmail, CustomerUserName, CustomerPassword)
VALUES(1,'Contemporary Casuals','1355 S Hines Blvd','Gainesville','FL','32601-2871', 'N/A', 'N/A', 'N/A');

INSERT INTO Customer
VALUES(2, 'Value Furnitures', '15145 S.W. 17th St.', 'Plano', 'TX', '75094-7734','N/A', 'N/A', 'N/A');

INSERT INTO Customer
VALUES(3, 'Home Furnishings', '1900 Allard Ave', 'Albany', 'NY', '12209-1125','homefurnishings?@gmail.com','CUSTOMER1','CUSTOMER1#');

INSERT INTO Customer
VALUES(4, 'Eastern Furniture', '1925 Beltline Rd.', 'Carteret', 'NJ', '07008-3188', 'N/A', 'N/A', 'N/A');

INSERT INTO Customer
VALUES(5, 'Impressions', '5585 Westcott Ct.', 'Sacramento', 'CA', '94206-4056', 'N/A', 'N/A', 'N/A');

INSERT INTO Customer
VALUES(6, 'Furniture Gallery', '325 Flatiron Dr.', 'Boulder', 'CO', '80514-4432', 'N/A', 'N/A', 'N/A');

INSERT INTO Customer
VALUES(7, 'New Furniture', 'Palace Ave', 'Farmington', 'NM',' ', 'N/A', 'N/A', 'N/A');

INSERT INTO Customer
VALUES(8, 'Dunkins Furniture', '7700 Main St', 'Syracuse', 'NY', '31590', 'N/A', 'N/A', 'N/A');

INSERT INTO Customer
VALUES(9, 'A Carpet', '434 Abe Dr', 'Rome', 'NY', '13440', 'N/A', 'N/A', 'N/A');

INSERT INTO Customer
VALUES(12, 'Flanigan Furniture', 'Snow Flake Rd', 'Ft Walton Beach', 'FL', '32548', 'N/A', 'N/A', 'N/A');

INSERT INTO Customer
VALUES(13, 'Ikards', '1011 S. Main St', 'Las Cruces', 'NM', '88001', 'N/A', 'N/A', 'N/A');

INSERT INTO Customer
VALUES(14, 'Wild Bills', 'Four Horse Rd', 'Oak Brook', 'Il', '60522', 'N/A', 'N/A', 'N/A');

INSERT INTO Customer
VALUES(15, 'Janets Collection', 'Janet Lane', 'Virginia Beach', 'VA', '10012', 'N/A', 'N/A', 'N/A');

INSERT INTO Customer
VALUES(16, 'ABC Furniture Co.', '152 Geramino Drive', 'Rome', 'NY', '13440', 'N/A', 'N/A', 'N/A');


--TERRITORY INSERTS
DESC Territory
INSERT INTO Territory(TerritoryID, TerritoryName)
VALUES(1, 'SouthEast');

INSERT INTO Territory
VALUES(2, 'SouthWest');

INSERT INTO Territory
VALUES(3,'NorthEast');

INSERT INTO Territory
VALUES(4, 'NorthWest');

INSERT INTO Territory
VALUES(5, 'Central');



--SALESPERSON INSERTS
DESC Salesperson;
INSERT INTO Salesperson(SalespersonID, SalespersonName, SalespersonPhone, 
SalesPersonEmail, SalespersonUserName, SalesPersonPassword, TerritoryID)
VALUES(1, 'Doug Henny','8134445555','salesperson?@gmail.com','SALESPERSON','SALESPERSON#',1);

INSERT INTO Salesperson
VALUES(2, 'Robert Lewis', '8139264006', 'N/A', 'N/A', 'N/A', 2);

INSERT INTO Salesperson
VALUES(3, 'William Strong', '5053821212', 'N/A', 'N/A', 'N/A', 3);

INSERT INTO Salesperson
VALUES(4, 'Julie Dawson', '4355346677', 'N/A', 'N/A', 'N/A', 4);

INSERT INTO Salesperson
VALUES(5, 'Jacob Winslow', '2238973498', 'N/A', 'N/A', 'N/A', 5);



--DOESBUSINESSIN INSERTS
DESC DoesBusinessIn
INSERT INTO DoesBusinessIn(CustomerID, TerritoryID)
VALUES(1,1);

INSERT INTO DoesBusinessIn
VALUES(2,2);
INSERT INTO DoesBusinessIn
VALUES(3,3);
INSERT INTO DoesBusinessIn
VALUES(4,4);
INSERT INTO DoesBusinessIn
VALUES(5,5);
INSERT INTO DoesBusinessIn
VALUES(6,1);
INSERT INTO DoesBusinessIn
VALUES(7,2);



--PRODUCT INSERTS
DESC Product
INSERT INTO Product(ProductID, ProductName, ProductFinish, ProductStandardPrice, ProductLineID, Photo)
VALUES(1, 'End Table', 'Cherry', 175, 1, 'table.jpg');

INSERT INTO Product
VALUES(2, 'Coffee Table', 'Natural Ash', 200, 2, 'N/A');

INSERT INTO Product
VALUES(3, 'Computer Desk', 'Natural Ash', 375, 2, 'N/A');

INSERT INTO Product
VALUES(4, 'Entertainment Center', 'Natural Maple', 650, 3, 'N/A');

INSERT INTO Product
VALUES(5, 'Writers Desk', 'Cherry', 325, 1, 'N/A');

INSERT INTO Product
VALUES(6, '8-Drawer Desk', 'White Ash', 750, 2, 'N/A');

INSERT INTO Product
VALUES(7, 'Dining Table', 'Natural Ash', 800, 2, 'N/A');

INSERT INTO Product
VALUES(8, 'Computer Desk', 'Walnut', 250, 3, 'N/A');



--PRODUCT LINE INSERTS
DESC ProductLine
INSERT INTO ProductLine(ProductLineID,ProductLineName)
VALUES(1, 'Cherry Tree');

INSERT INTO ProductLine
VALUES(2, 'Scandinavia');

INSERT INTO ProductLine
VALUES(3,'Country Look');



--ORDER INSERTS
DESC Orders
INSERT INTO Orders(OrderID, OrderDate, CustomerID)
VALUES(1001, '21/Aug/16', 1); --21/August/2016

INSERT INTO Orders
VALUES(1002, '21/Jul/2016', 8); --21/July/2016

INSERT INTO Orders
VALUES(1003, '22/Aug/16', 15); -- 22/August/2016

INSERT INTO Orders
VALUES(1004, '22/Oct/16', 5); --22/October/2016

INSERT INTO Orders
VALUES(1005, '24/Jul/16', 3); --24/July/2016

INSERT INTO Orders
VALUES(1006, '24/Oct/16', 2); --24/October/2016

INSERT INTO Orders
VALUES(1007, '27/Aug/16', 5); --27/August/2016

INSERT INTO Orders
VALUES(1008, '30/Oct/16', 12); --30/October/2016

INSERT INTO Orders
VALUES(1009, '05/Nov/16', 4); --05/November/2016

INSERT INTO Orders
VALUES(1010, '05/Nov/16', 1); --05/November/2016



--ORDER LINE INSERTS
DESC OrderLine
INSERT INTO OrderLine(OrderID, ProductID, OrderedQuantity, SalesPrice)
VALUES(1001,1,2, 175);

INSERT INTO OrderLine
VALUES(1001,2,2, 200);

INSERT INTO OrderLine
VALUES(1001, 4, 1,650);

INSERT INTO OrderLine
VALUES(1002, 3, 5, 375);

INSERT INTO OrderLine
VALUES(1003, 3, 3, 375);

INSERT INTO OrderLine
VALUES(1004, 6, 2, 750);

INSERT INTO OrderLine
VALUES(1004, 8, 2, 250);

INSERT INTO OrderLine
VALUES(1005, 4, 4, 650);

INSERT INTO OrderLine
VALUES(1005, 4, 4, 650);

INSERT INTO OrderLine
VALUES(1006, 5, 2, 325);

INSERT INTO OrderLine
VALUES(1006, 7, 2, 800);

INSERT INTO OrderLine
VALUES(1007, 1, 3, 175);

INSERT INTO OrderLine
VALUES(1007, 2, 2, 200);

INSERT INTO OrderLine
VALUES(1007, 2, 2, 200);

INSERT INTO OrderLine
VALUES(1008, 8, 3, 250);

INSERT INTO OrderLine
VALUES(1009, 4, 2, 650);

INSERT INTO OrderLine
VALUES(1009, 7, 3, 800);

INSERT INTO OrderLine
VALUES(1010, 8, 10, 250);

--PRICE UPDATE INSERTS
--BUT THERE ARE NONE
*/


-------------------------------QUERIES-----------------------
/*
--#1
--Which products have a standard price of less than $ 275? 
--PRODUCTID                                          TOTALVALUE
--PRODUCTSTANDARDPRICE                              
--175
--200
--250
--------------------
Select productstandardprice
FROM product
WHERE product.productstandardprice < 275;
*/

/*
--#2
--List the unit price, product name, and product ID for all products in the Product table. 
--PRODUCTSTANDARDPRICE                               PRODUCTNAME                                        PRODUCTID                                         
--175                                                End Table                                          1                                                 
--200                                                Coffee Table                                       2                                                 
--375                                                Computer Desk                                      3                                                 
--650                                                Entertainment Center                               4                                                 
--325                                                Writers Desk                                       5                                                 
--750                                                8-Drawer Desk                                      6                                                 
--800                                                Dining Table                                       7                                                 
--250                                                Computer Desk                                      8 
-----------------------------------------------------------------------------------------------------------------
Select productstandardprice, productname, productID
FROM product;
*/

/*
--#3
--What is the average standard price for all products in inventory? 
--AVG(PRODUCTSTANDARDPRICE)
--                  440.625
---------------------------
SELECT AVG(productstandardprice)
FROM product;
*/

/*
--#4
--How many different items were ordered on order number 1004? 
--COUNT(ORDERID)
--             2
----------------
SELECT COUNT(orderID)
FROM OrderLine
WHERE orderID = '1004';
*/

/*
--#5
--Which orders have been placed since 10/ 24/ 2010? 
--ORDERDATE
--21-AUG-16
--21-JUL-16
--22-AUG-16
--22-OCT-16
--24-JUL-16
--24-OCT-16
--27-AUG-16
--30-OCT-16
--05-NOV-16
--05-NOV-16
-----------
SELECT Orderdate
FROM orders
WHERE OrderDate > '24-OCT-2010';
*/

/*
--#6
--What furniture does COSC3380 carry that isn’t made of cherry? 
--PRODUCTID   PRODUCTNAME              PRODUCTFINISH         PRODUCTSTANDARDPRICE      PRODUCTLINEID                                          
--2           Coffee Table              Natural Ash           200                        2                                                                                       
--3           Computer Desk             Natural Ash           375                        2                                                                                           
--4           Entertainment Center      Natural Maple         650                        3                                                                                          
--6           8-Drawer Desk             White Ash             750                        2                                                                                         
--7           Dining Table              Natural Ash           800                        2                                                                                              
--8           Computer Desk             Walnut                250                        3 
----------------------------------------------------------------------------------------------------
SELECT *
FROM product
WHERE PRODUCTFINISH != 'Cherry';
*/

/*
--#7
--List product name, finish, and standard price for all desks and all tables 
--that cost more than $ 300 in the Product table. 
--PRODUCTNAME                                        PRODUCTFINISH                                      PRODUCTSTANDARDPRICE                              
--Computer Desk                                      Natural Ash                                        375                                               
--Entertainment Center                               Natural Maple                                      650                                               
--Writers Desk                                       Cherry                                             325                                               
--8-Drawer Desk                                      White Ash                                          750                                               
--Dining Table                                       Natural Ash                                        800    
---------------------------------------------------------------------------------------------------------------------------
SELECT productname, productfinish, productstandardprice
FROM product
WHERE productstandardprice > '300';
*/

/*
--#8
--Which products in the Product table have a standard price between $ 200 and $ 300? 
--PRODUCTID    PRODUCTNAME     PRODUCTFINISH   PRODUCTSTANDARDPRICE   PRODUCTLINEID 
--2            Coffee Table    Natural Ash     200                    2                                                                                               
--8            Computer Desk   Walnut          250                    3   
---------------------------------------------------------------------------------
SELECT *
FROM product
WHERE productstandardprice BETWEEN 200 AND 300;
*/

/*
--#9
--List customer, city, and state for all customers in the Customer table whose address is 
--Florida, Texas, California, or Hawaii. 
--List the customers alphabetically by state and alphabetically by customer within each state. 
--CUSTOMERNAME            CUSTOMERCITY      CUSTOMERSTATE                                     
--Impressions             Sacramento        CA                                                
--Contemporary Casuals    Gainesville       FL                                                
--Flanigan Furniture      Ft Walton Beach   FL                                                
--Value Furnitures        Plano             TX
-------------------------------------------------------
SELECT CustomerName, CustomerCity, CustomerState
FROM Customer
WHERE customerstate IN('CA', 'FL', 'HI', 'TX')
ORDER BY CustomerState ASC, CustomerName ASC;
*/

/*
--#10
--Count the number of customers with addresses in each state to which we ship. 
--COUNT(CUSTOMERADDRESS) CUSTOMERSTATE                                     
--                     1 CA                                                
--                     1 CO                                                
--                     2 FL                                                
--                     1 Il                                                
--                     1 NJ                                                
--                     2 NM                                                
--                     4 NY                                                
--                     1 TX                                                
--                     1 VA 
----------------------------------------
SELECT COUNT(CustomerAddress), CustomerState
FROM Customer
GROUP BY CustomerState
ORDER BY CustomerState ASC;
*/

/*
--#11
--Count the number of customers with addresses in 
--each city to which we ship. List the cities by state. 
--NUMBEROFCUSTOMERS CUSTOMERCITY        CUSTOMERSTATE                                     
--                1 Carteret            NJ                                                
--                1 Sacramento          CA                                                
--                1 Gainesville         FL                                                
--                1 Plano               TX                                                
--                1 Farmington          NM                                                
--                2 Rome                NY                                                
--                1 Ft Walton Beach     FL                                                
--                1 Oak Brook           Il                                                
--                1 Boulder             CO                                                
--                1 Las Cruces          NM                                                
--                1 Syracuse            NY                                                
--                1 Virginia Beach      VA                                                
--                1 Albany              NY
------------------------------------------------------
SELECT COUNT(CustomerAddress) AS NumberOfCustomers, CustomerCity, CustomerState
FROM Customer
GROUP BY CustomerCity, CustomerState;
*/

/*
--#12
--Find only states with more than one customer. 
--CUSTOMERSTATE     COUNT(CUSTOMERADDRESS)
--NM                2
--NY                4
--FL                2
-----------------------------------------
SELECT CustomerState, COUNT(CustomerAddress)
FROM Customer
GROUP BY CustomerState
HAVING COUNT(CustomerAddress) > 1;
*/

/*
--#13
--List, in alphabetical order, the product finish and the average standard price for each 
--finish for selected finishes having an average standard price less than 750. 
--PRODUCTFINISH                                      AVG(PRODUCTSTANDARDPRICE)
--Cherry                                                                   250
--Natural Ash                                                       458.333333
--Natural Maple                                                            650
--Walnut                                                                   250
------------------------------------------------------------------------------
SELECT productfinish, AVG(productstandardprice)
FROM product
GROUP BY productfinish
HAVING AVG(productstandardprice) < 750
ORDER BY productfinish ASC;
*/

/*
--#14
--What is the total value of orders placed for each furniture product? 
--PRODUCTID      TOTALVALUE
--1              875
--2              1200
--3              3000
--4              7150
--5              650
--6              1500
--7              4000
--8              3750
-------------------------
SELECT OrderLine.ProductID, SUM(OrderedQuantity * SalesPrice) AS TotalValue
FROM OrderLine
GROUP BY productID
ORDER BY ProductID;
*/

-------------------------------------------------------
--Views

--Product Line Sales Comparison Report a list of each of the products in the 
--COSC3380 product line showing each product's total sales to date
/*
--VIEW 1
--PRODUCTID    TOTALSALES
--1            875
--2            1200
--3            3000
--4            7150
--5            650
--6            1500
--7            4000
--8            3750
CREATE VIEW SalesComparison AS
SELECT OrderLine.ProductID, SUM(OrderedQuantity * SalesPrice) AS TotalSales
FROM OrderLine
GROUP BY productID
ORDER BY ProductID;
*/
/*
--VIEW 2
--PRODUCTID     TOTALVALUE
--1             875
--2             1200
--3             3000
--4             7150
--5             650
--6             1500
--7             4000
--8             3750
--Total value of orders placed for each product
CREATE VIEW TotalValueReport AS
SELECT OrderLine.ProductID, SUM(OrderedQuantity * SalesPrice) AS TotalValue
FROM OrderLine
GROUP BY productID
ORDER BY ProductID;
*/
/*
--VIEW 3
--PRODUCTNAME            PRODUCTSTANDARDPRICE                              
--End Table              175                                               
--Coffee Table           200                                               
--Computer Desk          375                                               
--Entertainment Center   650                                               
--Writers Desk           325                                               
--8-Drawer Desk          750                                               
--Dining Table           800                                               
--Computer Desk          250   
CREATE VIEW DataForCustomer AS
SELECT productname, productstandardprice
FROM product;
*/
/*
--VIEW4
--TOTALCUSTOMERS CUSTOMERSTATE                                     
--             1 CA                                                
--             1 CO                                                
--             2 FL                                                
--             1 Il                                                
--             1 NJ                                                
--             2 NM                                                
--             4 NY                                                
--             1 TX                                                
--             1 VA 
CREATE VIEW CustomerByState AS
SELECT COUNT(CustomerAddress) AS TotalCustomers, CustomerState
FROM Customer
GROUP BY CustomerState
ORDER BY CustomerState ASC;
*/
/*
--VIEW 5
--CUSTOMERID    ORDERDATE ORDERID     PRODUCTID    ORDEREDQUANTITY     PRICEPERITEM      PRODUCTNAME                                       
--1             05-NOV-16 1010        8            10                  250               Computer Desk                                     
--1             21-AUG-16 1001        2            2                   200               Coffee Table                                      
--1             21-AUG-16 1001        1            2                   175               End Table                                         
--1             21-AUG-16 1001        4            1                   650               Entertainment Center                              
--12            30-OCT-16 1008        8            3                   250               Computer Desk                                     
--15            22-AUG-16 1003        3            3                   375               Computer Desk                                     
--2             24-OCT-16 1006        5            2                   325               Writers Desk                                      
--2             24-OCT-16 1006        7            2                   800               Dining Table                                      
--3             24-JUL-16 1005        4            4                   650               Entertainment Center                              
--3             24-JUL-16 1005        4            4                   650               Entertainment Center                              
--4             05-NOV-16 1009        7            3                   800               Dining Table                                      
--4             05-NOV-16 1009        4            2                   650               Entertainment Center                              
--5             22-OCT-16 1004        8            2                   250               Computer Desk                                     
--5             27-AUG-16 1007        2            2                   200               Coffee Table                                      
--5             27-AUG-16 1007        2            2                   200               Coffee Table                                      
--5             27-AUG-16 1007        1            3                   175               End Table                                         
--5             22-OCT-16 1004        6            2                   750               8-Drawer Desk                                     
--8             21-JUL-16 1002        3            5                   375               Computer Desk                                     
CREATE VIEW PurchaseHistory AS
SELECT Orders.CustomerID, Orders.OrderDate, Orders.OrderID, OrderLine.ProductID, OrderLine.OrderedQuantity, OrderLine.SalesPrice AS PricePerItem, Product.ProductName
FROM Orders, OrderLine, Product
WHERE Orders.OrderID = OrderLine.OrderID AND OrderLine.ProductID = Product.ProductID
ORDER BY CustomerID;
*/

-------------------
----------Trigger is below this------
/*
Consider the following example: The inventory manager needs to know (the action of being informed) 
when an inventory item’s standard price is updated in the Product table (the event). 
After creating a new table, PriceUpdates, write a trigger that enters each product when it is updated,
the date that the change was made, and the new standard price that was entered. 
*/

--DROP TABLE PriceUpdates
/*
CREATE TABLE PriceUpdates (
ProductUpdate VARCHAR2(50),
DateChanged DATE,
NewStandardPrice VARCHAR2(50)
);

INSERT INTO Product(ProductID, ProductName, ProductFinish, 
ProductStandardPrice, ProductLineID, Photo, SalePrice)
VALUES(9, 'Example', 'ExampleFinish', 999, 9, 'N/A', 900);

--DELETE FROM Product WHERE ProductID = 9;

CREATE OR REPLACE TRIGGER StandardPriceUpdate
AFTER INSERT OR UPDATE ON Product
FOR EACH ROW
DECLARE 
    NameCheck VARCHAR2(50);
BEGIN
    
    INSERT INTO PriceUpdates(ProductUpdate, DateChanged, NewStandardPrice)
    VALUES(:NEW.ProductName, CURRENT_DATE, :NEW.ProductStandardPrice);
END;
/
SELECT * FROM PriceUpdates;
*/

----------PART 2----------Comment line separating the procedure from the rest of the code-----------

--ALTER TABLE Product 
--ADD SalePrice DECIMAL(6, 2);
--DROP COLUMN SalePrice;
/*
CREATE OR REPLACE PROCEDURE ProductLineSale
IS
    PriceCheck VARCHAR2(50);
    Discount VARCHAR2(50);
    --Example DECIMAL(6, 2) := 200.00;
    --Example2 VARCHAR2(50) :='350.00';
BEGIN
    FOR r IN (
        SELECT ProductStandardPrice INTO Discount
        FROM Product 
        ) LOOP
    --DBMS_OUTPUT.PUT_LINE('Discount: ' || r.ProductStandardPrice);
    IF r.ProductStandardPrice > 400 THEN
    --DBMS OUTPUT LINES ARE HERE FOR ERROR CHECKING
    --TO_NUMBER('r.ProductStandardPrice', '999');
    --DBMS_OUTPUT.PUT_LINE('Price: ' || r.ProductStandardPrice || ' * 10% = ');
    --DBMS_OUTPUT.PUT_LINE('--');
    --Example := TO_NUMBER(r.ProductStandardPrice, '999.99');
    --DBMS_OUTPUT.PUT('Price: $' || Example || '. 10% Discount: $' || Example * .10 || '. ');
    --DBMS_OUTPUT.PUT('Discounted Price: $');
    --DBMS_OUTPUT.PUT_LINE(Example - (Example * .10));
    UPDATE Product SET Product.SalePrice = Product.ProductStandardPrice * 0.9 WHERE Product.ProductStandardPrice >= 400;
    
    ELSE
    --DBMS_OUTPUT.PUT_LINE('-Price: ' || r.ProductStandardPrice || ' * 15%');
    --DBMS_OUTPUT.PUT_LINE('---');
    --Example := TO_NUMBER(r.ProductStandardPrice, '999.99');
    --DBMS_OUTPUT.PUT('Price: $' || Example || '. 15% Discount: $' || Example * .15 || '. ');
    --DBMS_OUTPUT.PUT('Discounted Price: $');
    --DBMS_OUTPUT.PUT_LINE(Example - (Example * .15));
    UPDATE Product SET Product.SalePrice = Product.ProductStandardPrice * 0.85 WHERE Product.ProductStandardPrice < 400;
    
    END IF;
    
    END LOOP;
    
END ProductLineSale;
/
--SET SERVEROUTPUT ON;

EXECUTE ProductLineSale;

SELECT SalePrice, ProductStandardPrice
FROM Product;
*/

------------------------------------------------------------------------------------------------------------------

---WebPage Results:
--Product ID, Product Description?, Number of times the product has been ordered


--PRODUCTID     PRODUCTNAME               PRODUCTFINISH       Orders
--1             End Table                 Cherry              2
--2             Coffee Table              Natural Ash         3
--3             Computer Desk             Natural Ash         2
--4             Entertainment Center      Natural Maple       4
--5             Writers Desk              Cherry              1
--6             8-Drawer Desk             White Ash           1
--7             Dining Table              Natural Ash         2
--8             Computer Desk             Walnut              3
-----------------------------------------------------------------------
/*
--CREATE OR REPLACE VIEW SalestoDate AS
SELECT OrderLine.ProductID, Product.ProductName, Product.ProductFinish, COUNT(OrderLine.ProductID) AS "Orders"
FROM OrderLine, Product
WHERE OrderLine.ProductID = Product.ProductID
GROUP BY OrderLine.ProductID, Product.ProductName, Product.ProductFinish
ORDER BY OrderLine.ProductID ASC;
*/

COMMIT;